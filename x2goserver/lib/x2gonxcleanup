#!/usr/bin/perl

# Copyright (C) 2014 X2Go Project - http://wiki.x2go.org
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
# Copyright (C) 2014 Guangzhou Nianguan Electronics Technology Co.Ltd. <opensource@gznianguan.com>
# Copyright (C) 2014 Mike Gabriel <mike.gabriel@das-netzwerkteam.de>
#

use strict;
use Sys::Hostname;
use IO::Socket;
use Sys::Syslog qw( :standard :macros );

use lib `x2gopath lib`;
use x2godbwrapper;
use x2gologlevel;
use x2goutils;

openlog($0,'cons,pid','user');
setlogmask( LOG_UPTO(x2gologlevel()) );


sub get_session_info {
	my $theX2GoSID = $_[0];
	foreach  my $sessionLine (db_listsessions(hostname)) {
		if ($sessionLine =~ /$theX2GoSID/) {
			return split(/\|/,$sessionLine);
		}
	}
	return 0;
}

sub check_x2go_sessionid {
	if (sanitizer("x2gosid",@ARGV[0])) {
		return sanitizer("x2gosid",@ARGV[0]);
	} elsif (sanitizer("x2gosid",$ENV{'X2GO_SESSION'})) {
		return sanitizer("x2gosid",$ENV{'X2GO_SESSION'});
	} else {
		die "No X2Go Session ID in ARGV or ENV!\n";
	}
}

sub test_socket_state {
	my $portNum = sanitizer("num",$_[0]) or die "Port number not a number '$_[0]'?";
	my $socket = IO::Socket::INET->new( PeerAddr => 'localhost', PeerPort => $portNum, Proto    => 'tcp');
	if (defined $socket) {
		print $socket "\n";
		$socket->close;
		return 1;
	} else {
	return 0;
	}
}

my $doRetryCnt = 5;
my $X2GoSID = check_x2go_sessionid;

my @X2GoSesINFO = get_session_info($X2GoSID);
if (@X2GoSesINFO[1] eq $X2GoSID) {
	while ($doRetryCnt > 0) {
		$doRetryCnt--;
		if (test_socket_state($X2GoSesINFO[8])) {
			exit;
		} 
		sleep 1;
	}
}
