#!/usr/bin/perl

# Copyright (C) 2007-2012 X2Go Project - http://wiki.x2go.org
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
# Copyright (C) 2007-2012  Oleksandr Shneyder <oleksandr.shneyder@obviously-nice.de>
# Copyright (C) 2007-2012  Heinz-Markus Graesing <heinz-m.graesing@obviously-nice.de>

use strict;
use Sys::Hostname;
use Sys::Syslog qw( :standard :macros );

my $x2go_lib_path=`x2gopath libexec`;
use lib `x2gopath libexec`;
use x2gologlevel;

openlog($0,'cons,pid','user');
setlogmask( LOG_UPTO(x2gologlevel()) );


sub check_pid
{
	my $pid=shift;
	my $sess=shift;
	my $sec=shift;
	if ($sec < 30)
	{
		return 1;
	}
	open (F,"</proc/$pid/cmdline") or return 0;
	my $text=<F>;
	close (F);
	if ($text =~ m/$sess/)
	{
		return 1;
	}
	return 0;
}

sub has_terminated
{
	my $sess=shift;
	my $user=shift;
	my $log="/tmp/.x2go-${user}/session-C-${sess}.log";
	my $text=`tail -1 $log 2>/dev/null`;
	if ($text =~ m/Session terminated/)
	{
		return 1;
	}
	return 0;
}

sub is_suspended
{
	my $sess=shift;
	my $user=shift;
	my $log="/tmp/.x2go-${user}/session-C-${sess}.log";
	my $text=`tail -1 $log 2>/dev/null`;
	if ($text =~ m/Session suspended/)
	{
		return 1;
	}
	return 0;
}

sub is_running
{
	my $sess=shift;
	my $user=shift;
	my $log="/tmp/.x2go-${user}/session-C-${sess}.log";
	my $text=`tail -1 $log 2>/dev/null`;
	if (!is_suspended($sess, $user) && !has_terminated($sess, $user))
	{
		return 1;
	}
	return 0;
}

sub catch_term
{
	unlink("/var/run/x2goserver.pid");
	exit;
}

my $uname;
#my $serv=$ENV{'HOSTNAME'};
my $serv = hostname;
my $pid = fork();
if (not defined $pid) 
{
	print "resources not avilable.\n";
} 
elsif ($pid != 0) 
{
	open (F,">/var/run/x2goserver.pid");
	print F "$pid\n";
	close(F);
}
elsif ($pid == 0 )
{
	# close any open file descriptor left open by our parent before the fork
	for (glob "/proc/$$/fd/*") { POSIX::close($1) if m{/(\d+)$}; }

	$SIG{TERM}=\&catch_term;
	$SIG{CHLD} = sub { wait };

	my %blocked_sessions = ();

	while(sleep 2)
	{
		my $outp=`$x2go_lib_path/x2golistsessions_sql $serv 2>/dev/null`;
		my @outp=split("\n","$outp");

		# forget earlier remembered blocked sessions
		while ( my ($session, $blocked_time) = each(%blocked_sessions) )
		{
			if (! join(',', @outp)=~m/$session/)
			{
				delete $blocked_sessions{$session};
			}
		}

		for (my $i=0;$i<@outp;$i++)
		{
			my @sinfo=split('\\|',"@outp[$i]");
			if (@sinfo[4]eq 'F')
			{

				syslog('debug', "@sinfo[1] is blocked");
				if (defined $blocked_sessions{ @sinfo[1] })
				{
					$blocked_sessions{@sinfo[1]} += 2;
					if ($blocked_sessions{@sinfo[1]} >= 20)
					{
						# send SIGKILL to dangling X-server processes
						syslog('warning', "@sinfo[1]: found stale X-server process (@sinfo[0]), sending SIGKILL");
						qw(kill -9 @sinfo[0]);
						delete $blocked_sessions{$session};
					}
				} else {
					$blocked_sessions{@sinfo[1]} = 0;
					syslog('debug', "@sinfo[1]: unmounting all shares");
					system( "su @sinfo[11] -c \"export HOSTNAME && x2goumount-session @sinfo[1]\" 2> /dev/null");
				}

			}
			elsif (! check_pid (@sinfo[0],@sinfo[1],@sinfo[12]))
			{
				system("su @sinfo[11] -c \"$x2go_lib_path/x2gochangestatus 'F' @sinfo[1] \" > /dev/null");
				syslog('debug', "@sinfo[1], pid @sinfo[0] does not exist, changing status from @sinfo[4] to F");
				syslog('debug', "@sinfo[1]: unmounting all shares");
				system( "su @sinfo[11] -c \"export HOSTNAME && x2goumount-session @sinfo[1]\" 2> /dev/null");
			}
			else
			{ 
				if (@sinfo[4]eq 'R')
				{
					if (is_suspended(@sinfo[1],@sinfo[11]))
					{
						system("su @sinfo[11] -c  \"$x2go_lib_path/x2gochangestatus 'S' @sinfo[1] \" > /dev/null");
						syslog('debug', "@sinfo[1] is suspended, changing status from @sinfo[4] to S");
						syslog('debug', "@sinfo[1]: unmounting all shares");
						system( "su @sinfo[11] -c \"export HOSTNAME && x2goumount-session @sinfo[1]\" 2> /dev/null");
					}
				}
				if (@sinfo[4]eq 'S')
				{
					if (is_running(@sinfo[1],@sinfo[11]))
					{
						syslog('debug', "@sinfo[1]: unmounting all shares");
						system( "su @sinfo[11] -c \"export HOSTNAME && x2goumount-session @sinfo[1]\" 2> /dev/null");
						system("su @sinfo[11] -c  \"x2gosuspend-session @sinfo[1] \" > /dev/null");
						syslog('debug', "@sinfo[1] was found running and has now been suspended");
					}
				}
				if (@sinfo[4]eq 'T')
				{
					if (!has_terminated(@sinfo[1],@sinfo[11]))
					{
						syslog('debug', "@sinfo[1]: unmounting all shares");
						system( "su @sinfo[11] -c \"export HOSTNAME && x2goumount-session @sinfo[1]\" 2> /dev/null");
						system("su @sinfo[11] -c  \"x2goterminate-session @sinfo[1] \" > /dev/null");
						syslog('debug', "@sinfo[1] has been requested for termination via the session DB");
					}
				}
			}
		}
	}
}
